{
  "language": "Solidity",
  "sources": {
    "contracts/hardhat-dependency-compiler/@chainlink/contracts/src/v0.8/dev/VRFCoordinatorV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@chainlink/contracts/src/v0.8/dev/VRFCoordinatorV2.sol';\n"
    },
    "@chainlink/contracts/src/v0.8/dev/VRFCoordinatorV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/LinkTokenInterface.sol\";\nimport \"../interfaces/BlockhashStoreInterface.sol\";\nimport \"../interfaces/AggregatorV3Interface.sol\";\nimport \"../interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"../interfaces/TypeAndVersionInterface.sol\";\nimport \"../interfaces/ERC677ReceiverInterface.sol\";\nimport \"./VRF.sol\";\nimport \"../ConfirmedOwner.sol\";\nimport \"../VRFConsumerBaseV2.sol\";\n\ncontract VRFCoordinatorV2 is\n  VRF,\n  ConfirmedOwner,\n  TypeAndVersionInterface,\n  VRFCoordinatorV2Interface,\n  ERC677ReceiverInterface\n{\n  LinkTokenInterface public immutable LINK;\n  AggregatorV3Interface public immutable LINK_ETH_FEED;\n  BlockhashStoreInterface public immutable BLOCKHASH_STORE;\n\n  // We need to maintain a list of consuming addresses.\n  // This bound ensures we are able to loop over them as needed.\n  // Should a user require more consumers, they can use multiple subscriptions.\n  uint16 public constant MAX_CONSUMERS = 100;\n  error TooManyConsumers();\n  error InsufficientBalance();\n  error InvalidConsumer(uint64 subId, address consumer);\n  error InvalidSubscription();\n  error OnlyCallableFromLink();\n  error InvalidCalldata();\n  error MustBeSubOwner(address owner);\n  error PendingRequestExists();\n  error MustBeRequestedOwner(address proposedOwner);\n  error BalanceInvariantViolated(uint256 internalBalance, uint256 externalBalance); // Should never happen\n  event FundsRecovered(address to, uint256 amount);\n  // We use the subscription struct (1 word)\n  // at fulfillment time.\n  struct Subscription {\n    // There are only 1e9*1e18 = 1e27 juels in existence, so the balance can fit in uint96 (2^96 ~ 7e28)\n    uint96 balance; // Common link balance used for all consumer requests.\n    uint64 reqCount; // For fee tiers\n  }\n  // We use the config for the mgmt APIs\n  struct SubscriptionConfig {\n    address owner; // Owner can fund/withdraw/cancel the sub.\n    address requestedOwner; // For safely transferring sub ownership.\n    // Maintains the list of keys in s_consumers.\n    // We do this for 2 reasons:\n    // 1. To be able to clean up all keys from s_consumers when canceling a subscription.\n    // 2. To be able to return the list of all consumers in getSubscription.\n    // Note that we need the s_consumers map to be able to directly check if a\n    // consumer is valid without reading all the consumers from storage.\n    address[] consumers;\n  }\n  // Note a nonce of 0 indicates an the consumer is not assigned to that subscription.\n  mapping(address => mapping(uint64 => uint64)) /* consumer */ /* subId */ /* nonce */\n    private s_consumers;\n  mapping(uint64 => SubscriptionConfig) /* subId */ /* subscriptionConfig */\n    private s_subscriptionConfigs;\n  mapping(uint64 => Subscription) /* subId */ /* subscription */\n    private s_subscriptions;\n  // We make the sub count public so that its possible to\n  // get all the current subscriptions via getSubscription.\n  uint64 private s_currentSubId;\n  // s_totalBalance tracks the total link sent to/from\n  // this contract through onTokenTransfer, cancelSubscription and oracleWithdraw.\n  // A discrepancy with this contract's link balance indicates someone\n  // sent tokens using transfer and so we may need to use recoverFunds.\n  uint96 private s_totalBalance;\n  event SubscriptionCreated(uint64 indexed subId, address owner);\n  event SubscriptionFunded(uint64 indexed subId, uint256 oldBalance, uint256 newBalance);\n  event SubscriptionConsumerAdded(uint64 indexed subId, address consumer);\n  event SubscriptionConsumerRemoved(uint64 indexed subId, address consumer);\n  event SubscriptionCanceled(uint64 indexed subId, address to, uint256 amount);\n  event SubscriptionOwnerTransferRequested(uint64 indexed subId, address from, address to);\n  event SubscriptionOwnerTransferred(uint64 indexed subId, address from, address to);\n\n  // Set this maximum to 200 to give us a 56 block window to fulfill\n  // the request before requiring the block hash feeder.\n  uint16 public constant MAX_REQUEST_CONFIRMATIONS = 200;\n  uint32 public constant MAX_NUM_WORDS = 500;\n  // 5k is plenty for an EXTCODESIZE call (2600) + warm CALL (100)\n  // and some arithmetic operations.\n  uint256 private constant GAS_FOR_CALL_EXACT_CHECK = 5_000;\n  error InvalidRequestConfirmations(uint16 have, uint16 min, uint16 max);\n  error GasLimitTooBig(uint32 have, uint32 want);\n  error NumWordsTooBig(uint32 have, uint32 want);\n  error ProvingKeyAlreadyRegistered(bytes32 keyHash);\n  error NoSuchProvingKey(bytes32 keyHash);\n  error InvalidLinkWeiPrice(int256 linkWei);\n  error InsufficientGasForConsumer(uint256 have, uint256 want);\n  error NoCorrespondingRequest();\n  error IncorrectCommitment();\n  error BlockhashNotInStore(uint256 blockNum);\n  error PaymentTooLarge();\n  error Reentrant();\n  struct RequestCommitment {\n    uint64 blockNum;\n    uint64 subId;\n    uint32 callbackGasLimit;\n    uint32 numWords;\n    address sender;\n  }\n  mapping(bytes32 => address) /* keyHash */ /* oracle */\n    private s_provingKeys;\n  bytes32[] private s_provingKeyHashes;\n  mapping(address => uint96) /* oracle */ /* LINK balance */\n    private s_withdrawableTokens;\n  mapping(uint256 => bytes32) /* requestID */ /* commitment */\n    private s_requestCommitments;\n  event ProvingKeyRegistered(bytes32 keyHash, address indexed oracle);\n  event ProvingKeyDeregistered(bytes32 keyHash, address indexed oracle);\n  event RandomWordsRequested(\n    bytes32 indexed keyHash,\n    uint256 requestId,\n    uint256 preSeed,\n    uint64 indexed subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords,\n    address indexed sender\n  );\n  event RandomWordsFulfilled(uint256 indexed requestId, uint256 outputSeed, uint96 payment, bool success);\n\n  struct Config {\n    uint16 minimumRequestConfirmations;\n    uint32 maxGasLimit;\n    // Reentrancy protection.\n    bool reentrancyLock;\n    // stalenessSeconds is how long before we consider the feed price to be stale\n    // and fallback to fallbackWeiPerUnitLink.\n    uint32 stalenessSeconds;\n    // Gas to cover oracle payment after we calculate the payment.\n    // We make it configurable in case those operations are repriced.\n    uint32 gasAfterPaymentCalculation;\n  }\n  int256 private s_fallbackWeiPerUnitLink;\n  Config private s_config;\n  FeeConfig private s_feeConfig;\n  struct FeeConfig {\n    // Flat fee charged per fulfillment in millionths of link\n    // So fee range is [0, 2^32/10^6].\n    uint32 fulfillmentFlatFeeLinkPPMTier1;\n    uint32 fulfillmentFlatFeeLinkPPMTier2;\n    uint32 fulfillmentFlatFeeLinkPPMTier3;\n    uint32 fulfillmentFlatFeeLinkPPMTier4;\n    uint32 fulfillmentFlatFeeLinkPPMTier5;\n    uint24 reqsForTier2;\n    uint24 reqsForTier3;\n    uint24 reqsForTier4;\n    uint24 reqsForTier5;\n  }\n  event ConfigSet(\n    uint16 minimumRequestConfirmations,\n    uint32 maxGasLimit,\n    uint32 stalenessSeconds,\n    uint32 gasAfterPaymentCalculation,\n    int256 fallbackWeiPerUnitLink,\n    FeeConfig feeConfig\n  );\n\n  constructor(\n    address link,\n    address blockhashStore,\n    address linkEthFeed\n  ) ConfirmedOwner(msg.sender) {\n    LINK = LinkTokenInterface(link);\n    LINK_ETH_FEED = AggregatorV3Interface(linkEthFeed);\n    BLOCKHASH_STORE = BlockhashStoreInterface(blockhashStore);\n  }\n\n  /**\n   * @notice Registers a proving key to an oracle.\n   * @param oracle address of the oracle\n   * @param publicProvingKey key that oracle can use to submit vrf fulfillments\n   */\n  function registerProvingKey(address oracle, uint256[2] calldata publicProvingKey) external onlyOwner {\n    bytes32 kh = hashOfKey(publicProvingKey);\n    if (s_provingKeys[kh] != address(0)) {\n      revert ProvingKeyAlreadyRegistered(kh);\n    }\n    s_provingKeys[kh] = oracle;\n    s_provingKeyHashes.push(kh);\n    emit ProvingKeyRegistered(kh, oracle);\n  }\n\n  /**\n   * @notice Deregisters a proving key to an oracle.\n   * @param publicProvingKey key that oracle can use to submit vrf fulfillments\n   */\n  function deregisterProvingKey(uint256[2] calldata publicProvingKey) external onlyOwner {\n    bytes32 kh = hashOfKey(publicProvingKey);\n    address oracle = s_provingKeys[kh];\n    if (oracle == address(0)) {\n      revert NoSuchProvingKey(kh);\n    }\n    delete s_provingKeys[kh];\n    for (uint256 i = 0; i < s_provingKeyHashes.length; i++) {\n      if (s_provingKeyHashes[i] == kh) {\n        bytes32 last = s_provingKeyHashes[s_provingKeyHashes.length - 1];\n        // Copy last element and overwrite kh to be deleted with it\n        s_provingKeyHashes[i] = last;\n        s_provingKeyHashes.pop();\n      }\n    }\n    emit ProvingKeyDeregistered(kh, oracle);\n  }\n\n  /**\n   * @notice Returns the proving key hash key associated with this public key\n   * @param publicKey the key to return the hash of\n   */\n  function hashOfKey(uint256[2] memory publicKey) public pure returns (bytes32) {\n    return keccak256(abi.encode(publicKey));\n  }\n\n  /**\n   * @notice Sets the configuration of the vrfv2 coordinator\n   * @param minimumRequestConfirmations global min for request confirmations\n   * @param maxGasLimit global max for request gas limit\n   * @param stalenessSeconds if the eth/link feed is more stale then this, use the fallback price\n   * @param gasAfterPaymentCalculation gas used in doing accounting after completing the gas measurement\n   * @param fallbackWeiPerUnitLink fallback eth/link price in the case of a stale feed\n   * @param feeConfig fee tier configuration\n   */\n  function setConfig(\n    uint16 minimumRequestConfirmations,\n    uint32 maxGasLimit,\n    uint32 stalenessSeconds,\n    uint32 gasAfterPaymentCalculation,\n    int256 fallbackWeiPerUnitLink,\n    FeeConfig memory feeConfig\n  ) external onlyOwner {\n    if (minimumRequestConfirmations > MAX_REQUEST_CONFIRMATIONS) {\n      revert InvalidRequestConfirmations(\n        minimumRequestConfirmations,\n        minimumRequestConfirmations,\n        MAX_REQUEST_CONFIRMATIONS\n      );\n    }\n    if (fallbackWeiPerUnitLink <= 0) {\n      revert InvalidLinkWeiPrice(fallbackWeiPerUnitLink);\n    }\n    s_config = Config({\n      minimumRequestConfirmations: minimumRequestConfirmations,\n      maxGasLimit: maxGasLimit,\n      stalenessSeconds: stalenessSeconds,\n      gasAfterPaymentCalculation: gasAfterPaymentCalculation,\n      reentrancyLock: false\n    });\n    s_feeConfig = feeConfig;\n    s_fallbackWeiPerUnitLink = fallbackWeiPerUnitLink;\n    emit ConfigSet(\n      minimumRequestConfirmations,\n      maxGasLimit,\n      stalenessSeconds,\n      gasAfterPaymentCalculation,\n      fallbackWeiPerUnitLink,\n      s_feeConfig\n    );\n  }\n\n  function getConfig()\n    external\n    view\n    returns (\n      uint16 minimumRequestConfirmations,\n      uint32 maxGasLimit,\n      uint32 stalenessSeconds,\n      uint32 gasAfterPaymentCalculation\n    )\n  {\n    return (\n      s_config.minimumRequestConfirmations,\n      s_config.maxGasLimit,\n      s_config.stalenessSeconds,\n      s_config.gasAfterPaymentCalculation\n    );\n  }\n\n  function getFeeConfig()\n    external\n    view\n    returns (\n      uint32 fulfillmentFlatFeeLinkPPMTier1,\n      uint32 fulfillmentFlatFeeLinkPPMTier2,\n      uint32 fulfillmentFlatFeeLinkPPMTier3,\n      uint32 fulfillmentFlatFeeLinkPPMTier4,\n      uint32 fulfillmentFlatFeeLinkPPMTier5,\n      uint24 reqsForTier2,\n      uint24 reqsForTier3,\n      uint24 reqsForTier4,\n      uint24 reqsForTier5\n    )\n  {\n    return (\n      s_feeConfig.fulfillmentFlatFeeLinkPPMTier1,\n      s_feeConfig.fulfillmentFlatFeeLinkPPMTier2,\n      s_feeConfig.fulfillmentFlatFeeLinkPPMTier3,\n      s_feeConfig.fulfillmentFlatFeeLinkPPMTier4,\n      s_feeConfig.fulfillmentFlatFeeLinkPPMTier5,\n      s_feeConfig.reqsForTier2,\n      s_feeConfig.reqsForTier3,\n      s_feeConfig.reqsForTier4,\n      s_feeConfig.reqsForTier5\n    );\n  }\n\n  function getTotalBalance() external view returns (uint256) {\n    return s_totalBalance;\n  }\n\n  function getFallbackWeiPerUnitLink() external view returns (int256) {\n    return s_fallbackWeiPerUnitLink;\n  }\n\n  /**\n   * @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\n   * @param subId subscription id\n   * @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\n   */\n  function ownerCancelSubscription(uint64 subId) external onlyOwner {\n    if (s_subscriptionConfigs[subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    cancelSubscriptionHelper(subId, s_subscriptionConfigs[subId].owner);\n  }\n\n  /**\n   * @notice Recover link sent with transfer instead of transferAndCall.\n   * @param to address to send link to\n   */\n  function recoverFunds(address to) external onlyOwner {\n    uint256 externalBalance = LINK.balanceOf(address(this));\n    uint256 internalBalance = uint256(s_totalBalance);\n    if (internalBalance > externalBalance) {\n      revert BalanceInvariantViolated(internalBalance, externalBalance);\n    }\n    if (internalBalance < externalBalance) {\n      uint256 amount = externalBalance - internalBalance;\n      LINK.transfer(to, amount);\n      emit FundsRecovered(to, amount);\n    }\n    // If the balances are equal, nothing to be done.\n  }\n\n  /**\n   * @inheritdoc VRFCoordinatorV2Interface\n   */\n  function getRequestConfig()\n    external\n    view\n    override\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    )\n  {\n    return (s_config.minimumRequestConfirmations, s_config.maxGasLimit, s_provingKeyHashes);\n  }\n\n  /**\n   * @inheritdoc VRFCoordinatorV2Interface\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 requestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external override nonReentrant returns (uint256) {\n    // Input validation using the subscription storage.\n    if (s_subscriptionConfigs[subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    // Its important to ensure that the consumer is in fact who they say they\n    // are, otherwise they could use someone else's subscription balance.\n    // A nonce of 0 indicates consumer is not allocated to the sub.\n    uint64 currentNonce = s_consumers[msg.sender][subId];\n    if (currentNonce == 0) {\n      revert InvalidConsumer(subId, msg.sender);\n    }\n    // Input validation using the config storage word.\n    if (\n      requestConfirmations < s_config.minimumRequestConfirmations || requestConfirmations > MAX_REQUEST_CONFIRMATIONS\n    ) {\n      revert InvalidRequestConfirmations(\n        requestConfirmations,\n        s_config.minimumRequestConfirmations,\n        MAX_REQUEST_CONFIRMATIONS\n      );\n    }\n    // No lower bound on the requested gas limit. A user could request 0\n    // and they would simply be billed for the proof verification and wouldn't be\n    // able to do anything with the random value.\n    if (callbackGasLimit > s_config.maxGasLimit) {\n      revert GasLimitTooBig(callbackGasLimit, s_config.maxGasLimit);\n    }\n    if (numWords > MAX_NUM_WORDS) {\n      revert NumWordsTooBig(numWords, MAX_NUM_WORDS);\n    }\n    // Note we do not check whether the keyHash is valid to save gas.\n    // The consequence for users is that they can send requests\n    // for invalid keyHashes which will simply not be fulfilled.\n    uint64 nonce = currentNonce + 1;\n    (uint256 requestId, uint256 preSeed) = computeRequestId(keyHash, msg.sender, subId, nonce);\n\n    s_requestCommitments[requestId] = keccak256(\n      abi.encode(requestId, block.number, subId, callbackGasLimit, numWords, msg.sender)\n    );\n    emit RandomWordsRequested(\n      keyHash,\n      requestId,\n      preSeed,\n      subId,\n      requestConfirmations,\n      callbackGasLimit,\n      numWords,\n      msg.sender\n    );\n    s_consumers[msg.sender][subId] = nonce;\n\n    return requestId;\n  }\n\n  /**\n   * @notice Get request commitment\n   * @param requestId id of request\n   * @dev used to determine if a request is fulfilled or not\n   */\n  function getCommitment(uint256 requestId) external view returns (bytes32) {\n    return s_requestCommitments[requestId];\n  }\n\n  function computeRequestId(\n    bytes32 keyHash,\n    address sender,\n    uint64 subId,\n    uint64 nonce\n  ) private pure returns (uint256, uint256) {\n    uint256 preSeed = uint256(keccak256(abi.encode(keyHash, sender, subId, nonce)));\n    return (uint256(keccak256(abi.encode(keyHash, preSeed))), preSeed);\n  }\n\n  /**\n   * @dev calls target address with exactly gasAmount gas and data as calldata\n   * or reverts if at least gasAmount gas is not available.\n   */\n  function callWithExactGas(\n    uint256 gasAmount,\n    address target,\n    bytes memory data\n  ) private returns (bool success) {\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      let g := gas()\n      // Compute g -= GAS_FOR_CALL_EXACT_CHECK and check for underflow\n      // The gas actually passed to the callee is min(gasAmount, 63//64*gas available).\n      // We want to ensure that we revert if gasAmount >  63//64*gas available\n      // as we do not want to provide them with less, however that check itself costs\n      // gas.  GAS_FOR_CALL_EXACT_CHECK ensures we have at least enough gas to be able\n      // to revert if gasAmount >  63//64*gas available.\n      if lt(g, GAS_FOR_CALL_EXACT_CHECK) {\n        revert(0, 0)\n      }\n      g := sub(g, GAS_FOR_CALL_EXACT_CHECK)\n      // if g - g//64 <= gasAmount, revert\n      // (we subtract g//64 because of EIP-150)\n      if iszero(gt(sub(g, div(g, 64)), gasAmount)) {\n        revert(0, 0)\n      }\n      // solidity calls check that a contract actually exists at the destination, so we do the same\n      if iszero(extcodesize(target)) {\n        revert(0, 0)\n      }\n      // call and return whether we succeeded. ignore return data\n      // call(gas,addr,value,argsOffset,argsLength,retOffset,retLength)\n      success := call(gasAmount, target, 0, add(data, 0x20), mload(data), 0, 0)\n    }\n    return success;\n  }\n\n  function getRandomnessFromProof(Proof memory proof, RequestCommitment memory rc)\n    private\n    view\n    returns (\n      bytes32 keyHash,\n      uint256 requestId,\n      uint256 randomness\n    )\n  {\n    keyHash = hashOfKey(proof.pk);\n    // Only registered proving keys are permitted.\n    address oracle = s_provingKeys[keyHash];\n    if (oracle == address(0)) {\n      revert NoSuchProvingKey(keyHash);\n    }\n    requestId = uint256(keccak256(abi.encode(keyHash, proof.seed)));\n    bytes32 commitment = s_requestCommitments[requestId];\n    if (commitment == 0) {\n      revert NoCorrespondingRequest();\n    }\n    if (\n      commitment != keccak256(abi.encode(requestId, rc.blockNum, rc.subId, rc.callbackGasLimit, rc.numWords, rc.sender))\n    ) {\n      revert IncorrectCommitment();\n    }\n\n    bytes32 blockHash = blockhash(rc.blockNum);\n    if (blockHash == bytes32(0)) {\n      blockHash = BLOCKHASH_STORE.getBlockhash(rc.blockNum);\n      if (blockHash == bytes32(0)) {\n        revert BlockhashNotInStore(rc.blockNum);\n      }\n    }\n\n    // The seed actually used by the VRF machinery, mixing in the blockhash\n    uint256 actualSeed = uint256(keccak256(abi.encodePacked(proof.seed, blockHash)));\n    randomness = VRF.randomValueFromVRFProof(proof, actualSeed); // Reverts on failure\n  }\n\n  /*\n   * @notice Compute fee based on the request count\n   * @param reqCount number of requests\n   * @return feePPM fee in LINK PPM\n   */\n  function getFeeTier(uint64 reqCount) public view returns (uint32) {\n    FeeConfig memory fc = s_feeConfig;\n    if (0 <= reqCount && reqCount <= fc.reqsForTier2) {\n      return fc.fulfillmentFlatFeeLinkPPMTier1;\n    }\n    if (fc.reqsForTier2 < reqCount && reqCount <= fc.reqsForTier3) {\n      return fc.fulfillmentFlatFeeLinkPPMTier2;\n    }\n    if (fc.reqsForTier3 < reqCount && reqCount <= fc.reqsForTier4) {\n      return fc.fulfillmentFlatFeeLinkPPMTier3;\n    }\n    if (fc.reqsForTier4 < reqCount && reqCount <= fc.reqsForTier5) {\n      return fc.fulfillmentFlatFeeLinkPPMTier4;\n    }\n    return fc.fulfillmentFlatFeeLinkPPMTier5;\n  }\n\n  /*\n   * @notice Fulfill a randomness request\n   * @param proof contains the proof and randomness\n   * @param rc request commitment pre-image, committed to at request time\n   * @return payment amount billed to the subscription\n   * @dev simulated offchain to determine if sufficient balance is present to fulfill the request\n   */\n  function fulfillRandomWords(Proof memory proof, RequestCommitment memory rc) external nonReentrant returns (uint96) {\n    uint256 startGas = gasleft();\n    (bytes32 keyHash, uint256 requestId, uint256 randomness) = getRandomnessFromProof(proof, rc);\n\n    uint256[] memory randomWords = new uint256[](rc.numWords);\n    for (uint256 i = 0; i < rc.numWords; i++) {\n      randomWords[i] = uint256(keccak256(abi.encode(randomness, i)));\n    }\n\n    delete s_requestCommitments[requestId];\n    VRFConsumerBaseV2 v;\n    bytes memory resp = abi.encodeWithSelector(v.rawFulfillRandomWords.selector, requestId, randomWords);\n    // Call with explicitly the amount of callback gas requested\n    // Important to not let them exhaust the gas budget and avoid oracle payment.\n    // Do not allow any non-view/non-pure coordinator functions to be called\n    // during the consumers callback code via reentrancyLock.\n    // Note that callWithExactGas will revert if we do not have sufficient gas\n    // to give the callee their requested amount.\n    s_config.reentrancyLock = true;\n    bool success = callWithExactGas(rc.callbackGasLimit, rc.sender, resp);\n    s_config.reentrancyLock = false;\n\n    // Increment the req count for fee tier selection.\n    uint64 reqCount = s_subscriptions[rc.subId].reqCount;\n    s_subscriptions[rc.subId].reqCount += 1;\n\n    // We want to charge users exactly for how much gas they use in their callback.\n    // The gasAfterPaymentCalculation is meant to cover these additional operations where we\n    // decrement the subscription balance and increment the oracles withdrawable balance.\n    // We also add the flat link fee to the payment amount.\n    // Its specified in millionths of link, if s_config.fulfillmentFlatFeeLinkPPM = 1\n    // 1 link / 1e6 = 1e18 juels / 1e6 = 1e12 juels.\n    uint96 payment = calculatePaymentAmount(\n      startGas,\n      s_config.gasAfterPaymentCalculation,\n      getFeeTier(reqCount),\n      tx.gasprice\n    );\n    if (s_subscriptions[rc.subId].balance < payment) {\n      revert InsufficientBalance();\n    }\n    s_subscriptions[rc.subId].balance -= payment;\n    s_withdrawableTokens[s_provingKeys[keyHash]] += payment;\n    // Include payment in the event for tracking costs.\n    emit RandomWordsFulfilled(requestId, randomness, payment, success);\n    return payment;\n  }\n\n  // Get the amount of gas used for fulfillment\n  function calculatePaymentAmount(\n    uint256 startGas,\n    uint256 gasAfterPaymentCalculation,\n    uint32 fulfillmentFlatFeeLinkPPM,\n    uint256 weiPerUnitGas\n  ) internal view returns (uint96) {\n    int256 weiPerUnitLink;\n    weiPerUnitLink = getFeedData();\n    if (weiPerUnitLink <= 0) {\n      revert InvalidLinkWeiPrice(weiPerUnitLink);\n    }\n    // (1e18 juels/link) (wei/gas * gas) / (wei/link) = juels\n    uint256 paymentNoFee = (1e18 * weiPerUnitGas * (gasAfterPaymentCalculation + startGas - gasleft())) /\n      uint256(weiPerUnitLink);\n    uint256 fee = 1e12 * uint256(fulfillmentFlatFeeLinkPPM);\n    if (paymentNoFee > (1e27 - fee)) {\n      revert PaymentTooLarge(); // Payment + fee cannot be more than all of the link in existence.\n    }\n    return uint96(paymentNoFee + fee);\n  }\n\n  function getFeedData() private view returns (int256) {\n    uint32 stalenessSeconds = s_config.stalenessSeconds;\n    bool staleFallback = stalenessSeconds > 0;\n    uint256 timestamp;\n    int256 weiPerUnitLink;\n    (, weiPerUnitLink, , timestamp, ) = LINK_ETH_FEED.latestRoundData();\n    // solhint-disable-next-line not-rely-on-time\n    if (staleFallback && stalenessSeconds < block.timestamp - timestamp) {\n      weiPerUnitLink = s_fallbackWeiPerUnitLink;\n    }\n    return weiPerUnitLink;\n  }\n\n  /*\n   * @notice Oracle withdraw LINK earned through fulfilling requests\n   * @param recipient where to send the funds\n   * @param amount amount to withdraw\n   */\n  function oracleWithdraw(address recipient, uint96 amount) external nonReentrant {\n    if (s_withdrawableTokens[msg.sender] < amount) {\n      revert InsufficientBalance();\n    }\n    s_withdrawableTokens[msg.sender] -= amount;\n    s_totalBalance -= amount;\n    if (!LINK.transfer(recipient, amount)) {\n      revert InsufficientBalance();\n    }\n  }\n\n  function onTokenTransfer(\n    address, /* sender */\n    uint256 amount,\n    bytes calldata data\n  ) external override nonReentrant {\n    if (msg.sender != address(LINK)) {\n      revert OnlyCallableFromLink();\n    }\n    if (data.length != 32) {\n      revert InvalidCalldata();\n    }\n    uint64 subId = abi.decode(data, (uint64));\n    if (s_subscriptionConfigs[subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    // We do not check that the msg.sender is the subscription owner,\n    // anyone can fund a subscription.\n    uint256 oldBalance = s_subscriptions[subId].balance;\n    s_subscriptions[subId].balance += uint96(amount);\n    s_totalBalance += uint96(amount);\n    emit SubscriptionFunded(subId, oldBalance, oldBalance + amount);\n  }\n\n  function getCurrentSubId() external view returns (uint64) {\n    return s_currentSubId;\n  }\n\n  /**\n   * @inheritdoc VRFCoordinatorV2Interface\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    override\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    )\n  {\n    if (s_subscriptionConfigs[subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    return (\n      s_subscriptions[subId].balance,\n      s_subscriptions[subId].reqCount,\n      s_subscriptionConfigs[subId].owner,\n      s_subscriptionConfigs[subId].consumers\n    );\n  }\n\n  /**\n   * @inheritdoc VRFCoordinatorV2Interface\n   */\n  function createSubscription() external override nonReentrant returns (uint64) {\n    s_currentSubId++;\n    uint64 currentSubId = s_currentSubId;\n    address[] memory consumers = new address[](0);\n    s_subscriptions[currentSubId] = Subscription({balance: 0, reqCount: 0});\n    s_subscriptionConfigs[currentSubId] = SubscriptionConfig({\n      owner: msg.sender,\n      requestedOwner: address(0),\n      consumers: consumers\n    });\n\n    emit SubscriptionCreated(currentSubId, msg.sender);\n    return currentSubId;\n  }\n\n  /**\n   * @inheritdoc VRFCoordinatorV2Interface\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner)\n    external\n    override\n    onlySubOwner(subId)\n    nonReentrant\n  {\n    // Proposing to address(0) would never be claimable so don't need to check.\n    if (s_subscriptionConfigs[subId].requestedOwner != newOwner) {\n      s_subscriptionConfigs[subId].requestedOwner = newOwner;\n      emit SubscriptionOwnerTransferRequested(subId, msg.sender, newOwner);\n    }\n  }\n\n  /**\n   * @inheritdoc VRFCoordinatorV2Interface\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external override nonReentrant {\n    if (s_subscriptionConfigs[subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    if (s_subscriptionConfigs[subId].requestedOwner != msg.sender) {\n      revert MustBeRequestedOwner(s_subscriptionConfigs[subId].requestedOwner);\n    }\n    address oldOwner = s_subscriptionConfigs[subId].owner;\n    s_subscriptionConfigs[subId].owner = msg.sender;\n    s_subscriptionConfigs[subId].requestedOwner = address(0);\n    emit SubscriptionOwnerTransferred(subId, oldOwner, msg.sender);\n  }\n\n  /**\n   * @inheritdoc VRFCoordinatorV2Interface\n   */\n  function removeConsumer(uint64 subId, address consumer) external override onlySubOwner(subId) nonReentrant {\n    if (s_consumers[consumer][subId] == 0) {\n      revert InvalidConsumer(subId, consumer);\n    }\n    // Note bounded by MAX_CONSUMERS\n    address[] memory consumers = s_subscriptionConfigs[subId].consumers;\n    uint256 lastConsumerIndex = consumers.length - 1;\n    for (uint256 i = 0; i < consumers.length; i++) {\n      if (consumers[i] == consumer) {\n        address last = consumers[lastConsumerIndex];\n        // Storage write to preserve last element\n        s_subscriptionConfigs[subId].consumers[i] = last;\n        // Storage remove last element\n        s_subscriptionConfigs[subId].consumers.pop();\n        break;\n      }\n    }\n    delete s_consumers[consumer][subId];\n    emit SubscriptionConsumerRemoved(subId, consumer);\n  }\n\n  /**\n   * @inheritdoc VRFCoordinatorV2Interface\n   */\n  function addConsumer(uint64 subId, address consumer) external override onlySubOwner(subId) nonReentrant {\n    // Already maxed, cannot add any more consumers.\n    if (s_subscriptionConfigs[subId].consumers.length == MAX_CONSUMERS) {\n      revert TooManyConsumers();\n    }\n    if (s_consumers[consumer][subId] != 0) {\n      // Idempotence - do nothing if already added.\n      // Ensures uniqueness in s_subscriptions[subId].consumers.\n      return;\n    }\n    // Initialize the nonce to 1, indicating the consumer is allocated.\n    s_consumers[consumer][subId] = 1;\n    s_subscriptionConfigs[subId].consumers.push(consumer);\n\n    emit SubscriptionConsumerAdded(subId, consumer);\n  }\n\n  /**\n   * @inheritdoc VRFCoordinatorV2Interface\n   */\n  function cancelSubscription(uint64 subId, address to) external override onlySubOwner(subId) nonReentrant {\n    if (pendingRequestExists(subId)) {\n      revert PendingRequestExists();\n    }\n    cancelSubscriptionHelper(subId, to);\n  }\n\n  function cancelSubscriptionHelper(uint64 subId, address to) private nonReentrant {\n    SubscriptionConfig memory subConfig = s_subscriptionConfigs[subId];\n    Subscription memory sub = s_subscriptions[subId];\n    uint96 balance = sub.balance;\n    // Note bounded by MAX_CONSUMERS;\n    // If no consumers, does nothing.\n    for (uint256 i = 0; i < subConfig.consumers.length; i++) {\n      delete s_consumers[subConfig.consumers[i]][subId];\n    }\n    delete s_subscriptionConfigs[subId];\n    delete s_subscriptions[subId];\n    s_totalBalance -= balance;\n    if (!LINK.transfer(to, uint256(balance))) {\n      revert InsufficientBalance();\n    }\n    emit SubscriptionCanceled(subId, to, balance);\n  }\n\n  /*\n   * @noticeCheck to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId where to send the funds\n   * @return exits true if outstanding requests\n   * @dev Looping is bounded to MAX_CONSUMERS*(number of keyhashes).\n   * @dev Used to disable subscription canceling while outstanding request are present.\n   */\n  function pendingRequestExists(uint64 subId) public view returns (bool) {\n    SubscriptionConfig memory subConfig = s_subscriptionConfigs[subId];\n    for (uint256 i = 0; i < subConfig.consumers.length; i++) {\n      for (uint256 j = 0; j < s_provingKeyHashes.length; j++) {\n        (uint256 reqId, ) = computeRequestId(\n          s_provingKeyHashes[j],\n          subConfig.consumers[i],\n          subId,\n          s_consumers[subConfig.consumers[i]][subId]\n        );\n        if (s_requestCommitments[reqId] != 0) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  modifier onlySubOwner(uint64 subId) {\n    address owner = s_subscriptionConfigs[subId].owner;\n    if (owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    if (msg.sender != owner) {\n      revert MustBeSubOwner(owner);\n    }\n    _;\n  }\n\n  modifier nonReentrant() {\n    if (s_config.reentrancyLock) {\n      revert Reentrant();\n    }\n    _;\n  }\n\n  /**\n   * @notice The type and version of this contract\n   * @return Type and version string\n   */\n  function typeAndVersion() external pure virtual override returns (string memory) {\n    return \"VRFCoordinatorV2 1.0.0\";\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/BlockhashStoreInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface BlockhashStoreInterface {\n  function getBlockhash(uint256 number) external view returns (bytes32);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/TypeAndVersionInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract TypeAndVersionInterface {\n  function typeAndVersion() external pure virtual returns (string memory);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/ERC677ReceiverInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\ninterface ERC677ReceiverInterface {\n  function onTokenTransfer(\n    address sender,\n    uint256 amount,\n    bytes calldata data\n  ) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/dev/VRF.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/** ****************************************************************************\n  * @notice Verification of verifiable-random-function (VRF) proofs, following\n  * @notice https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\n  * @notice See https://eprint.iacr.org/2017/099.pdf for security proofs.\n\n  * @dev Bibliographic references:\n\n  * @dev Goldberg, et al., \"Verifiable Random Functions (VRFs)\", Internet Draft\n  * @dev draft-irtf-cfrg-vrf-05, IETF, Aug 11 2019,\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05\n\n  * @dev Papadopoulos, et al., \"Making NSEC5 Practical for DNSSEC\", Cryptology\n  * @dev ePrint Archive, Report 2017/099, https://eprint.iacr.org/2017/099.pdf\n  * ****************************************************************************\n  * @dev USAGE\n\n  * @dev The main entry point is randomValueFromVRFProof. See its docstring.\n  * ****************************************************************************\n  * @dev PURPOSE\n\n  * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n  * @dev to Vera the verifier in such a way that Vera can be sure he's not\n  * @dev making his output up to suit himself. Reggie provides Vera a public key\n  * @dev to which he knows the secret key. Each time Vera provides a seed to\n  * @dev Reggie, he gives back a value which is computed completely\n  * @dev deterministically from the seed and the secret key.\n\n  * @dev Reggie provides a proof by which Vera can verify that the output was\n  * @dev correctly computed once Reggie tells it to her, but without that proof,\n  * @dev the output is computationally indistinguishable to her from a uniform\n  * @dev random sample from the output space.\n\n  * @dev The purpose of this contract is to perform that verification.\n  * ****************************************************************************\n  * @dev DESIGN NOTES\n\n  * @dev The VRF algorithm verified here satisfies the full uniqueness, full\n  * @dev collision resistance, and full pseudo-randomness security properties.\n  * @dev See \"SECURITY PROPERTIES\" below, and\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-3\n\n  * @dev An elliptic curve point is generally represented in the solidity code\n  * @dev as a uint256[2], corresponding to its affine coordinates in\n  * @dev GF(FIELD_SIZE).\n\n  * @dev For the sake of efficiency, this implementation deviates from the spec\n  * @dev in some minor ways:\n\n  * @dev - Keccak hash rather than the SHA256 hash recommended in\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\n  * @dev   Keccak costs much less gas on the EVM, and provides similar security.\n\n  * @dev - Secp256k1 curve instead of the P-256 or ED25519 curves recommended in\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\n  * @dev   For curve-point multiplication, it's much cheaper to abuse ECRECOVER\n\n  * @dev - hashToCurve recursively hashes until it finds a curve x-ordinate. On\n  * @dev   the EVM, this is slightly more efficient than the recommendation in\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\n  * @dev   step 5, to concatenate with a nonce then hash, and rehash with the\n  * @dev   nonce updated until a valid x-ordinate is found.\n\n  * @dev - hashToCurve does not include a cipher version string or the byte 0x1\n  * @dev   in the hash message, as recommended in step 5.B of the draft\n  * @dev   standard. They are unnecessary here because no variation in the\n  * @dev   cipher suite is allowed.\n\n  * @dev - Similarly, the hash input in scalarFromCurvePoints does not include a\n  * @dev   commitment to the cipher suite, either, which differs from step 2 of\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\n  * @dev   . Also, the hash input is the concatenation of the uncompressed\n  * @dev   points, not the compressed points as recommended in step 3.\n\n  * @dev - In the calculation of the challenge value \"c\", the \"u\" value (i.e.\n  * @dev   the value computed by Reggie as the nonce times the secp256k1\n  * @dev   generator point, see steps 5 and 7 of\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\n  * @dev   ) is replaced by its ethereum address, i.e. the lower 160 bits of the\n  * @dev   keccak hash of the original u. This is because we only verify the\n  * @dev   calculation of u up to its address, by abusing ECRECOVER.\n  * ****************************************************************************\n  * @dev   SECURITY PROPERTIES\n\n  * @dev Here are the security properties for this VRF:\n\n  * @dev Full uniqueness: For any seed and valid VRF public key, there is\n  * @dev   exactly one VRF output which can be proved to come from that seed, in\n  * @dev   the sense that the proof will pass verifyVRFProof.\n\n  * @dev Full collision resistance: It's cryptographically infeasible to find\n  * @dev   two seeds with same VRF output from a fixed, valid VRF key\n\n  * @dev Full pseudorandomness: Absent the proofs that the VRF outputs are\n  * @dev   derived from a given seed, the outputs are computationally\n  * @dev   indistinguishable from randomness.\n\n  * @dev https://eprint.iacr.org/2017/099.pdf, Appendix B contains the proofs\n  * @dev for these properties.\n\n  * @dev For secp256k1, the key validation described in section\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.6\n  * @dev is unnecessary, because secp256k1 has cofactor 1, and the\n  * @dev representation of the public key used here (affine x- and y-ordinates\n  * @dev of the secp256k1 point on the standard y^2=x^3+7 curve) cannot refer to\n  * @dev the point at infinity.\n  * ****************************************************************************\n  * @dev OTHER SECURITY CONSIDERATIONS\n  *\n  * @dev The seed input to the VRF could in principle force an arbitrary amount\n  * @dev of work in hashToCurve, by requiring extra rounds of hashing and\n  * @dev checking whether that's yielded the x ordinate of a secp256k1 point.\n  * @dev However, under the Random Oracle Model the probability of choosing a\n  * @dev point which forces n extra rounds in hashToCurve is 2⁻ⁿ. The base cost\n  * @dev for calling hashToCurve is about 25,000 gas, and each round of checking\n  * @dev for a valid x ordinate costs about 15,555 gas, so to find a seed for\n  * @dev which hashToCurve would cost more than 2,017,000 gas, one would have to\n  * @dev try, in expectation, about 2¹²⁸ seeds, which is infeasible for any\n  * @dev foreseeable computational resources. (25,000 + 128 * 15,555 < 2,017,000.)\n\n  * @dev Since the gas block limit for the Ethereum main net is 10,000,000 gas,\n  * @dev this means it is infeasible for an adversary to prevent correct\n  * @dev operation of this contract by choosing an adverse seed.\n\n  * @dev (See TestMeasureHashToCurveGasCost for verification of the gas cost for\n  * @dev hashToCurve.)\n\n  * @dev It may be possible to make a secure constant-time hashToCurve function.\n  * @dev See notes in hashToCurve docstring.\n*/\ncontract VRF {\n  // See https://www.secg.org/sec2-v2.pdf, section 2.4.1, for these constants.\n  // Number of points in Secp256k1\n  uint256 private constant GROUP_ORDER = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\n  // Prime characteristic of the galois field over which Secp256k1 is defined\n  uint256 private constant FIELD_SIZE =\n    // solium-disable-next-line indentation\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\n  uint256 private constant WORD_LENGTH_BYTES = 0x20;\n\n  // (base^exponent) % FIELD_SIZE\n  // Cribbed from https://medium.com/@rbkhmrcr/precompiles-solidity-e5d29bd428c4\n  function bigModExp(uint256 base, uint256 exponent) internal view returns (uint256 exponentiation) {\n    uint256 callResult;\n    uint256[6] memory bigModExpContractInputs;\n    bigModExpContractInputs[0] = WORD_LENGTH_BYTES; // Length of base\n    bigModExpContractInputs[1] = WORD_LENGTH_BYTES; // Length of exponent\n    bigModExpContractInputs[2] = WORD_LENGTH_BYTES; // Length of modulus\n    bigModExpContractInputs[3] = base;\n    bigModExpContractInputs[4] = exponent;\n    bigModExpContractInputs[5] = FIELD_SIZE;\n    uint256[1] memory output;\n    assembly {\n      // solhint-disable-line no-inline-assembly\n      callResult := staticcall(\n        not(0), // Gas cost: no limit\n        0x05, // Bigmodexp contract address\n        bigModExpContractInputs,\n        0xc0, // Length of input segment: 6*0x20-bytes\n        output,\n        0x20 // Length of output segment\n      )\n    }\n    if (callResult == 0) {\n      revert(\"bigModExp failure!\");\n    }\n    return output[0];\n  }\n\n  // Let q=FIELD_SIZE. q % 4 = 3, ∴ x≡r^2 mod q ⇒ x^SQRT_POWER≡±r mod q.  See\n  // https://en.wikipedia.org/wiki/Modular_square_root#Prime_or_prime_power_modulus\n  uint256 private constant SQRT_POWER = (FIELD_SIZE + 1) >> 2;\n\n  // Computes a s.t. a^2 = x in the field. Assumes a exists\n  function squareRoot(uint256 x) internal view returns (uint256) {\n    return bigModExp(x, SQRT_POWER);\n  }\n\n  // The value of y^2 given that (x,y) is on secp256k1.\n  function ySquared(uint256 x) internal pure returns (uint256) {\n    // Curve is y^2=x^3+7. See section 2.4.1 of https://www.secg.org/sec2-v2.pdf\n    uint256 xCubed = mulmod(x, mulmod(x, x, FIELD_SIZE), FIELD_SIZE);\n    return addmod(xCubed, 7, FIELD_SIZE);\n  }\n\n  // True iff p is on secp256k1\n  function isOnCurve(uint256[2] memory p) internal pure returns (bool) {\n    // Section 2.3.6. in https://www.secg.org/sec1-v2.pdf\n    // requires each ordinate to be in [0, ..., FIELD_SIZE-1]\n    require(p[0] < FIELD_SIZE, \"invalid x-ordinate\");\n    require(p[1] < FIELD_SIZE, \"invalid y-ordinate\");\n    return ySquared(p[0]) == mulmod(p[1], p[1], FIELD_SIZE);\n  }\n\n  // Hash x uniformly into {0, ..., FIELD_SIZE-1}.\n  function fieldHash(bytes memory b) internal pure returns (uint256 x_) {\n    x_ = uint256(keccak256(b));\n    // Rejecting if x >= FIELD_SIZE corresponds to step 2.1 in section 2.3.4 of\n    // http://www.secg.org/sec1-v2.pdf , which is part of the definition of\n    // string_to_point in the IETF draft\n    while (x_ >= FIELD_SIZE) {\n      x_ = uint256(keccak256(abi.encodePacked(x_)));\n    }\n  }\n\n  // Hash b to a random point which hopefully lies on secp256k1. The y ordinate\n  // is always even, due to\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\n  // step 5.C, which references arbitrary_string_to_point, defined in\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5 as\n  // returning the point with given x ordinate, and even y ordinate.\n  function newCandidateSecp256k1Point(bytes memory b) internal view returns (uint256[2] memory p) {\n    unchecked {\n      p[0] = fieldHash(b);\n      p[1] = squareRoot(ySquared(p[0]));\n      if (p[1] % 2 == 1) {\n        // Note that 0 <= p[1] < FIELD_SIZE\n        // so this cannot wrap, we use unchecked to save gas.\n        p[1] = FIELD_SIZE - p[1];\n      }\n    }\n  }\n\n  // Domain-separation tag for initial hash in hashToCurve. Corresponds to\n  // vrf.go/hashToCurveHashPrefix\n  uint256 internal constant HASH_TO_CURVE_HASH_PREFIX = 1;\n\n  // Cryptographic hash function onto the curve.\n  //\n  // Corresponds to algorithm in section 5.4.1.1 of the draft standard. (But see\n  // DESIGN NOTES above for slight differences.)\n  //\n  // TODO(alx): Implement a bounded-computation hash-to-curve, as described in\n  // \"Construction of Rational Points on Elliptic Curves over Finite Fields\"\n  // http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.831.5299&rep=rep1&type=pdf\n  // and suggested by\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-01#section-5.2.2\n  // (Though we can't used exactly that because secp256k1's j-invariant is 0.)\n  //\n  // This would greatly simplify the analysis in \"OTHER SECURITY CONSIDERATIONS\"\n  // https://www.pivotaltracker.com/story/show/171120900\n  function hashToCurve(uint256[2] memory pk, uint256 input) internal view returns (uint256[2] memory rv) {\n    rv = newCandidateSecp256k1Point(abi.encodePacked(HASH_TO_CURVE_HASH_PREFIX, pk, input));\n    while (!isOnCurve(rv)) {\n      rv = newCandidateSecp256k1Point(abi.encodePacked(rv[0]));\n    }\n  }\n\n  /** *********************************************************************\n   * @notice Check that product==scalar*multiplicand\n   *\n   * @dev Based on Vitalik Buterin's idea in ethresear.ch post cited below.\n   *\n   * @param multiplicand: secp256k1 point\n   * @param scalar: non-zero GF(GROUP_ORDER) scalar\n   * @param product: secp256k1 expected to be multiplier * multiplicand\n   * @return verifies true iff product==scalar*multiplicand, with cryptographically high probability\n   */\n  function ecmulVerify(\n    uint256[2] memory multiplicand,\n    uint256 scalar,\n    uint256[2] memory product\n  ) internal pure returns (bool verifies) {\n    require(scalar != 0, \"zero scalar\"); // Rules out an ecrecover failure case\n    uint256 x = multiplicand[0]; // x ordinate of multiplicand\n    uint8 v = multiplicand[1] % 2 == 0 ? 27 : 28; // parity of y ordinate\n    // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\n    // Point corresponding to address ecrecover(0, v, x, s=scalar*x) is\n    // (x⁻¹ mod GROUP_ORDER) * (scalar * x * multiplicand - 0 * g), i.e.\n    // scalar*multiplicand. See https://crypto.stackexchange.com/a/18106\n    bytes32 scalarTimesX = bytes32(mulmod(scalar, x, GROUP_ORDER));\n    address actual = ecrecover(bytes32(0), v, bytes32(x), scalarTimesX);\n    // Explicit conversion to address takes bottom 160 bits\n    address expected = address(uint160(uint256(keccak256(abi.encodePacked(product)))));\n    return (actual == expected);\n  }\n\n  // Returns x1/z1-x2/z2=(x1z2-x2z1)/(z1z2) in projective coordinates on P¹(𝔽ₙ)\n  function projectiveSub(\n    uint256 x1,\n    uint256 z1,\n    uint256 x2,\n    uint256 z2\n  ) internal pure returns (uint256 x3, uint256 z3) {\n    unchecked {\n      uint256 num1 = mulmod(z2, x1, FIELD_SIZE);\n      // Note this cannot wrap since x2 is a point in [0, FIELD_SIZE-1]\n      // we use unchecked to save gas.\n      uint256 num2 = mulmod(FIELD_SIZE - x2, z1, FIELD_SIZE);\n      (x3, z3) = (addmod(num1, num2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\n    }\n  }\n\n  // Returns x1/z1*x2/z2=(x1x2)/(z1z2), in projective coordinates on P¹(𝔽ₙ)\n  function projectiveMul(\n    uint256 x1,\n    uint256 z1,\n    uint256 x2,\n    uint256 z2\n  ) internal pure returns (uint256 x3, uint256 z3) {\n    (x3, z3) = (mulmod(x1, x2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\n  }\n\n  /** **************************************************************************\n        @notice Computes elliptic-curve sum, in projective co-ordinates\n\n        @dev Using projective coordinates avoids costly divisions\n\n        @dev To use this with p and q in affine coordinates, call\n        @dev projectiveECAdd(px, py, qx, qy). This will return\n        @dev the addition of (px, py, 1) and (qx, qy, 1), in the\n        @dev secp256k1 group.\n\n        @dev This can be used to calculate the z which is the inverse to zInv\n        @dev in isValidVRFOutput. But consider using a faster\n        @dev re-implementation such as ProjectiveECAdd in the golang vrf package.\n\n        @dev This function assumes [px,py,1],[qx,qy,1] are valid projective\n             coordinates of secp256k1 points. That is safe in this contract,\n             because this method is only used by linearCombination, which checks\n             points are on the curve via ecrecover.\n        **************************************************************************\n        @param px The first affine coordinate of the first summand\n        @param py The second affine coordinate of the first summand\n        @param qx The first affine coordinate of the second summand\n        @param qy The second affine coordinate of the second summand\n\n        (px,py) and (qx,qy) must be distinct, valid secp256k1 points.\n        **************************************************************************\n        Return values are projective coordinates of [px,py,1]+[qx,qy,1] as points\n        on secp256k1, in P²(𝔽ₙ)\n        @return sx\n        @return sy\n        @return sz\n    */\n  function projectiveECAdd(\n    uint256 px,\n    uint256 py,\n    uint256 qx,\n    uint256 qy\n  )\n    internal\n    pure\n    returns (\n      uint256 sx,\n      uint256 sy,\n      uint256 sz\n    )\n  {\n    unchecked {\n      // See \"Group law for E/K : y^2 = x^3 + ax + b\", in section 3.1.2, p. 80,\n      // \"Guide to Elliptic Curve Cryptography\" by Hankerson, Menezes and Vanstone\n      // We take the equations there for (sx,sy), and homogenize them to\n      // projective coordinates. That way, no inverses are required, here, and we\n      // only need the one inverse in affineECAdd.\n\n      // We only need the \"point addition\" equations from Hankerson et al. Can\n      // skip the \"point doubling\" equations because p1 == p2 is cryptographically\n      // impossible, and required not to be the case in linearCombination.\n\n      // Add extra \"projective coordinate\" to the two points\n      (uint256 z1, uint256 z2) = (1, 1);\n\n      // (lx, lz) = (qy-py)/(qx-px), i.e., gradient of secant line.\n      // Cannot wrap since px and py are in [0, FIELD_SIZE-1]\n      uint256 lx = addmod(qy, FIELD_SIZE - py, FIELD_SIZE);\n      uint256 lz = addmod(qx, FIELD_SIZE - px, FIELD_SIZE);\n\n      uint256 dx; // Accumulates denominator from sx calculation\n      // sx=((qy-py)/(qx-px))^2-px-qx\n      (sx, dx) = projectiveMul(lx, lz, lx, lz); // ((qy-py)/(qx-px))^2\n      (sx, dx) = projectiveSub(sx, dx, px, z1); // ((qy-py)/(qx-px))^2-px\n      (sx, dx) = projectiveSub(sx, dx, qx, z2); // ((qy-py)/(qx-px))^2-px-qx\n\n      uint256 dy; // Accumulates denominator from sy calculation\n      // sy=((qy-py)/(qx-px))(px-sx)-py\n      (sy, dy) = projectiveSub(px, z1, sx, dx); // px-sx\n      (sy, dy) = projectiveMul(sy, dy, lx, lz); // ((qy-py)/(qx-px))(px-sx)\n      (sy, dy) = projectiveSub(sy, dy, py, z1); // ((qy-py)/(qx-px))(px-sx)-py\n\n      if (dx != dy) {\n        // Cross-multiply to put everything over a common denominator\n        sx = mulmod(sx, dy, FIELD_SIZE);\n        sy = mulmod(sy, dx, FIELD_SIZE);\n        sz = mulmod(dx, dy, FIELD_SIZE);\n      } else {\n        // Already over a common denominator, use that for z ordinate\n        sz = dx;\n      }\n    }\n  }\n\n  // p1+p2, as affine points on secp256k1.\n  //\n  // invZ must be the inverse of the z returned by projectiveECAdd(p1, p2).\n  // It is computed off-chain to save gas.\n  //\n  // p1 and p2 must be distinct, because projectiveECAdd doesn't handle\n  // point doubling.\n  function affineECAdd(\n    uint256[2] memory p1,\n    uint256[2] memory p2,\n    uint256 invZ\n  ) internal pure returns (uint256[2] memory) {\n    uint256 x;\n    uint256 y;\n    uint256 z;\n    (x, y, z) = projectiveECAdd(p1[0], p1[1], p2[0], p2[1]);\n    require(mulmod(z, invZ, FIELD_SIZE) == 1, \"invZ must be inverse of z\");\n    // Clear the z ordinate of the projective representation by dividing through\n    // by it, to obtain the affine representation\n    return [mulmod(x, invZ, FIELD_SIZE), mulmod(y, invZ, FIELD_SIZE)];\n  }\n\n  // True iff address(c*p+s*g) == lcWitness, where g is generator. (With\n  // cryptographically high probability.)\n  function verifyLinearCombinationWithGenerator(\n    uint256 c,\n    uint256[2] memory p,\n    uint256 s,\n    address lcWitness\n  ) internal pure returns (bool) {\n    // Rule out ecrecover failure modes which return address 0.\n    unchecked {\n      require(lcWitness != address(0), \"bad witness\");\n      uint8 v = (p[1] % 2 == 0) ? 27 : 28; // parity of y-ordinate of p\n      // Note this cannot wrap (X - Y % X), but we use unchecked to save\n      // gas.\n      bytes32 pseudoHash = bytes32(GROUP_ORDER - mulmod(p[0], s, GROUP_ORDER)); // -s*p[0]\n      bytes32 pseudoSignature = bytes32(mulmod(c, p[0], GROUP_ORDER)); // c*p[0]\n      // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\n      // The point corresponding to the address returned by\n      // ecrecover(-s*p[0],v,p[0],c*p[0]) is\n      // (p[0]⁻¹ mod GROUP_ORDER)*(c*p[0]-(-s)*p[0]*g)=c*p+s*g.\n      // See https://crypto.stackexchange.com/a/18106\n      // https://bitcoin.stackexchange.com/questions/38351/ecdsa-v-r-s-what-is-v\n      address computed = ecrecover(pseudoHash, v, bytes32(p[0]), pseudoSignature);\n      return computed == lcWitness;\n    }\n  }\n\n  // c*p1 + s*p2. Requires cp1Witness=c*p1 and sp2Witness=s*p2. Also\n  // requires cp1Witness != sp2Witness (which is fine for this application,\n  // since it is cryptographically impossible for them to be equal. In the\n  // (cryptographically impossible) case that a prover accidentally derives\n  // a proof with equal c*p1 and s*p2, they should retry with a different\n  // proof nonce.) Assumes that all points are on secp256k1\n  // (which is checked in verifyVRFProof below.)\n  function linearCombination(\n    uint256 c,\n    uint256[2] memory p1,\n    uint256[2] memory cp1Witness,\n    uint256 s,\n    uint256[2] memory p2,\n    uint256[2] memory sp2Witness,\n    uint256 zInv\n  ) internal pure returns (uint256[2] memory) {\n    unchecked {\n      // Note we are relying on the wrap around here\n      require((cp1Witness[0] % FIELD_SIZE) != (sp2Witness[0] % FIELD_SIZE), \"points in sum must be distinct\");\n      require(ecmulVerify(p1, c, cp1Witness), \"First mul check failed\");\n      require(ecmulVerify(p2, s, sp2Witness), \"Second mul check failed\");\n      return affineECAdd(cp1Witness, sp2Witness, zInv);\n    }\n  }\n\n  // Domain-separation tag for the hash taken in scalarFromCurvePoints.\n  // Corresponds to scalarFromCurveHashPrefix in vrf.go\n  uint256 internal constant SCALAR_FROM_CURVE_POINTS_HASH_PREFIX = 2;\n\n  // Pseudo-random number from inputs. Matches vrf.go/scalarFromCurvePoints, and\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\n  // The draft calls (in step 7, via the definition of string_to_int, in\n  // https://datatracker.ietf.org/doc/html/rfc8017#section-4.2 ) for taking the\n  // first hash without checking that it corresponds to a number less than the\n  // group order, which will lead to a slight bias in the sample.\n  //\n  // TODO(alx): We could save a bit of gas by following the standard here and\n  // using the compressed representation of the points, if we collated the y\n  // parities into a single bytes32.\n  // https://www.pivotaltracker.com/story/show/171120588\n  function scalarFromCurvePoints(\n    uint256[2] memory hash,\n    uint256[2] memory pk,\n    uint256[2] memory gamma,\n    address uWitness,\n    uint256[2] memory v\n  ) internal pure returns (uint256 s) {\n    return uint256(keccak256(abi.encodePacked(SCALAR_FROM_CURVE_POINTS_HASH_PREFIX, hash, pk, gamma, v, uWitness)));\n  }\n\n  // True if (gamma, c, s) is a correctly constructed randomness proof from pk\n  // and seed. zInv must be the inverse of the third ordinate from\n  // projectiveECAdd applied to cGammaWitness and sHashWitness. Corresponds to\n  // section 5.3 of the IETF draft.\n  //\n  // TODO(alx): Since I'm only using pk in the ecrecover call, I could only pass\n  // the x ordinate, and the parity of the y ordinate in the top bit of uWitness\n  // (which I could make a uint256 without using any extra space.) Would save\n  // about 2000 gas. https://www.pivotaltracker.com/story/show/170828567\n  function verifyVRFProof(\n    uint256[2] memory pk,\n    uint256[2] memory gamma,\n    uint256 c,\n    uint256 s,\n    uint256 seed,\n    address uWitness,\n    uint256[2] memory cGammaWitness,\n    uint256[2] memory sHashWitness,\n    uint256 zInv\n  ) internal view {\n    unchecked {\n      require(isOnCurve(pk), \"public key is not on curve\");\n      require(isOnCurve(gamma), \"gamma is not on curve\");\n      require(isOnCurve(cGammaWitness), \"cGammaWitness is not on curve\");\n      require(isOnCurve(sHashWitness), \"sHashWitness is not on curve\");\n      // Step 5. of IETF draft section 5.3 (pk corresponds to 5.3's Y, and here\n      // we use the address of u instead of u itself. Also, here we add the\n      // terms instead of taking the difference, and in the proof construction in\n      // vrf.GenerateProof, we correspondingly take the difference instead of\n      // taking the sum as they do in step 7 of section 5.1.)\n      require(verifyLinearCombinationWithGenerator(c, pk, s, uWitness), \"addr(c*pk+s*g)!=_uWitness\");\n      // Step 4. of IETF draft section 5.3 (pk corresponds to Y, seed to alpha_string)\n      uint256[2] memory hash = hashToCurve(pk, seed);\n      // Step 6. of IETF draft section 5.3, but see note for step 5 about +/- terms\n      uint256[2] memory v = linearCombination(c, gamma, cGammaWitness, s, hash, sHashWitness, zInv);\n      // Steps 7. and 8. of IETF draft section 5.3\n      uint256 derivedC = scalarFromCurvePoints(hash, pk, gamma, uWitness, v);\n      require(c == derivedC, \"invalid proof\");\n    }\n  }\n\n  // Domain-separation tag for the hash used as the final VRF output.\n  // Corresponds to vrfRandomOutputHashPrefix in vrf.go\n  uint256 internal constant VRF_RANDOM_OUTPUT_HASH_PREFIX = 3;\n\n  struct Proof {\n    uint256[2] pk;\n    uint256[2] gamma;\n    uint256 c;\n    uint256 s;\n    uint256 seed;\n    address uWitness;\n    uint256[2] cGammaWitness;\n    uint256[2] sHashWitness;\n    uint256 zInv;\n  }\n\n  /* ***************************************************************************\n     * @notice Returns proof's output, if proof is valid. Otherwise reverts\n\n     * @param proof vrf proof components\n     * @param seed  seed used to generate the vrf output\n     *\n     * Throws if proof is invalid, otherwise:\n     * @return output i.e., the random output implied by the proof\n     * ***************************************************************************\n     */\n  function randomValueFromVRFProof(Proof memory proof, uint256 seed) internal view returns (uint256 output) {\n    verifyVRFProof(\n      proof.pk,\n      proof.gamma,\n      proof.c,\n      proof.s,\n      seed,\n      proof.uWitness,\n      proof.cGammaWitness,\n      proof.sHashWitness,\n      proof.zInv\n    );\n    output = uint256(keccak256(abi.encode(VRF_RANDOM_OUTPUT_HASH_PREFIX, proof.gamma)));\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/ConfirmedOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ConfirmedOwnerWithProposal.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/OwnableInterface.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /**\n   * @notice Allows an owner to begin transferring ownership to a new address,\n   * pending.\n   */\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /**\n   * @notice Allows an ownership transfer to be completed by the recipient.\n   */\n  function acceptOwnership() external override {\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /**\n   * @notice Get the current owner\n   */\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /**\n   * @notice validate, transfer ownership, and emit relevant events\n   */\n  function _transferOwnership(address to) private {\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /**\n   * @notice validate access\n   */\n  function _validateOwnership() internal view {\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /**\n   * @notice Reverts if called by anyone other than the contract owner.\n   */\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface OwnableInterface {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"
    },
    "contracts/RNGChainlinkV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@pooltogether/owner-manager-contracts/contracts/Manageable.sol\";\n\nimport \"./RNGChainlinkV2Interface.sol\";\n\ncontract RNGChainlinkV2 is RNGChainlinkV2Interface, VRFConsumerBaseV2, Manageable {\n  /* ============ Global Variables ============ */\n\n  /// @dev Reference to the VRFCoordinatorV2 deployed contract\n  VRFCoordinatorV2Interface internal vrfCoordinator;\n\n  /// @dev A counter for the number of requests made used for request ids\n  uint32 internal requestCounter;\n\n  /// @dev Chainlink VRF subscription id\n  uint64 internal subscriptionId;\n\n  /// @dev Hash of the public key used to verify the VRF proof\n  bytes32 internal keyHash;\n\n  /// @dev A list of random numbers from past requests mapped by request id\n  mapping(uint32 => uint256) internal randomNumbers;\n\n  /// @dev A list of blocks to be locked at based on past requests mapped by request id\n  mapping(uint32 => uint32) internal requestLockBlock;\n\n  /// @dev A mapping from Chainlink request ids to internal request ids\n  mapping(uint256 => uint32) internal chainlinkRequestIds;\n\n  /* ============ Events ============ */\n\n  /**\n   * @notice Emitted when the Chainlink VRF keyHash is set\n   * @param keyHash Chainlink VRF keyHash\n   */\n  event KeyHashSet(bytes32 keyHash);\n\n  /**\n   * @notice Emitted when the Chainlink VRF subscription id is set\n   * @param subscriptionId Chainlink VRF subscription id\n   */\n  event SubscriptionIdSet(uint64 subscriptionId);\n\n  /**\n   * @notice Emitted when the Chainlink VRF Coordinator address is set\n   * @param vrfCoordinator Address of the VRF Coordinator\n   */\n  event VrfCoordinatorSet(VRFCoordinatorV2Interface indexed vrfCoordinator);\n\n  /* ============ Constructor ============ */\n\n  /**\n   * @notice Constructor of the contract\n   * @param _owner Owner of the contract\n   * @param _vrfCoordinator Address of the VRF Coordinator\n   * @param _subscriptionId Chainlink VRF subscription id\n   * @param _keyHash Hash of the public key used to verify the VRF proof\n   */\n  constructor(\n    address _owner,\n    VRFCoordinatorV2Interface _vrfCoordinator,\n    uint64 _subscriptionId,\n    bytes32 _keyHash\n  ) Ownable(_owner) VRFConsumerBaseV2(address(_vrfCoordinator)) {\n    _setVRFCoordinator(_vrfCoordinator);\n    _setSubscriptionId(_subscriptionId);\n    _setKeyhash(_keyHash);\n  }\n\n  /* ============ External Functions ============ */\n\n  /// @inheritdoc RNGInterface\n  function requestRandomNumber()\n    external\n    override\n    onlyManager\n    returns (uint32 requestId, uint32 lockBlock)\n  {\n    uint256 _vrfRequestId = vrfCoordinator.requestRandomWords(\n      keyHash,\n      subscriptionId,\n      3,\n      1000000,\n      1\n    );\n\n    requestCounter++;\n    uint32 _requestCounter = requestCounter;\n\n    requestId = _requestCounter;\n    chainlinkRequestIds[_vrfRequestId] = _requestCounter;\n\n    lockBlock = uint32(block.number);\n    requestLockBlock[_requestCounter] = lockBlock;\n\n    emit RandomNumberRequested(_requestCounter, msg.sender);\n  }\n\n  /// @inheritdoc RNGInterface\n  function isRequestComplete(uint32 _internalRequestId)\n    external\n    view\n    override\n    returns (bool isCompleted)\n  {\n    return randomNumbers[_internalRequestId] != 0;\n  }\n\n  /// @inheritdoc RNGInterface\n  function randomNumber(uint32 _internalRequestId)\n    external\n    view\n    override\n    returns (uint256 randomNum)\n  {\n    return randomNumbers[_internalRequestId];\n  }\n\n  /// @inheritdoc RNGInterface\n  function getLastRequestId() external view override returns (uint32 requestId) {\n    return requestCounter;\n  }\n\n  /// @inheritdoc RNGInterface\n  function getRequestFee() external pure override returns (address feeToken, uint256 requestFee) {\n    return (address(0), 0);\n  }\n\n  /// @inheritdoc RNGChainlinkV2Interface\n  function getKeyHash() external view override returns (bytes32) {\n    return keyHash;\n  }\n\n  /// @inheritdoc RNGChainlinkV2Interface\n  function getSubscriptionId() external view override returns (uint64) {\n    return subscriptionId;\n  }\n\n  /// @inheritdoc RNGChainlinkV2Interface\n  function getVrfCoordinator() external view override returns (VRFCoordinatorV2Interface) {\n    return vrfCoordinator;\n  }\n\n  /// @inheritdoc RNGChainlinkV2Interface\n  function setSubscriptionId(uint64 _subscriptionId) external override onlyOwner {\n    _setSubscriptionId(_subscriptionId);\n  }\n\n  /// @inheritdoc RNGChainlinkV2Interface\n  function setKeyhash(bytes32 _keyHash) external override onlyOwner {\n    _setKeyhash(_keyHash);\n  }\n\n  /* ============ Internal Functions ============ */\n\n  /**\n   * @notice Callback function called by VRF Coordinator\n   * @dev The VRF Coordinator will only call it once it has verified the proof associated with the randomness.\n   * @param _vrfRequestId Chainlink VRF request id\n   * @param _randomWords Chainlink VRF array of random words\n   */\n  function fulfillRandomWords(uint256 _vrfRequestId, uint256[] memory _randomWords)\n    internal\n    override\n  {\n    uint32 _internalRequestId = chainlinkRequestIds[_vrfRequestId];\n    require(_internalRequestId > 0, \"RNGChainLink/requestId-incorrect\");\n\n    uint256 _randomNumber = _randomWords[0];\n    randomNumbers[_internalRequestId] = _randomNumber;\n\n    emit RandomNumberCompleted(_internalRequestId, _randomNumber);\n  }\n\n  /**\n   * @notice Set Chainlink VRF coordinator contract address.\n   * @param _vrfCoordinator Chainlink VRF coordinator contract address\n   */\n  function _setVRFCoordinator(VRFCoordinatorV2Interface _vrfCoordinator) internal {\n    require(address(_vrfCoordinator) != address(0), \"RNGChainLink/vrf-not-zero-addr\");\n    vrfCoordinator = _vrfCoordinator;\n    emit VrfCoordinatorSet(_vrfCoordinator);\n  }\n\n  /**\n   * @notice Set Chainlink VRF subscription id associated with this contract.\n   * @param _subscriptionId Chainlink VRF subscription id\n   */\n  function _setSubscriptionId(uint64 _subscriptionId) internal {\n    require(_subscriptionId > 0, \"RNGChainLink/subId-gt-zero\");\n    subscriptionId = _subscriptionId;\n    emit SubscriptionIdSet(_subscriptionId);\n  }\n\n  /**\n   * @notice Set Chainlink VRF keyHash.\n   * @param _keyHash Chainlink VRF keyHash\n   */\n  function _setKeyhash(bytes32 _keyHash) internal {\n    require(_keyHash != bytes32(0), \"RNGChainLink/keyHash-not-empty\");\n    keyHash = _keyHash;\n    emit KeyHashSet(_keyHash);\n  }\n}\n"
    },
    "@pooltogether/owner-manager-contracts/contracts/Manageable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @title Abstract manageable contract that can be inherited by other contracts\n * @notice Contract module based on Ownable which provides a basic access control mechanism, where\n * there is an owner and a manager that can be granted exclusive access to specific functions.\n *\n * By default, the owner is the deployer of the contract.\n *\n * The owner account is set through a two steps process.\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\n *\n * The manager account needs to be set using {setManager}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyManager`, which can be applied to your functions to restrict their use to\n * the manager.\n */\nabstract contract Manageable is Ownable {\n    address private _manager;\n\n    /**\n     * @dev Emitted when `_manager` has been changed.\n     * @param previousManager previous `_manager` address.\n     * @param newManager new `_manager` address.\n     */\n    event ManagerTransferred(address indexed previousManager, address indexed newManager);\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice Gets current `_manager`.\n     * @return Current `_manager` address.\n     */\n    function manager() public view virtual returns (address) {\n        return _manager;\n    }\n\n    /**\n     * @notice Set or change of manager.\n     * @dev Throws if called by any account other than the owner.\n     * @param _newManager New _manager address.\n     * @return Boolean to indicate if the operation was successful or not.\n     */\n    function setManager(address _newManager) external onlyOwner returns (bool) {\n        return _setManager(_newManager);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Set or change of manager.\n     * @param _newManager New _manager address.\n     * @return Boolean to indicate if the operation was successful or not.\n     */\n    function _setManager(address _newManager) private returns (bool) {\n        address _previousManager = _manager;\n\n        require(_newManager != _previousManager, \"Manageable/existing-manager-address\");\n\n        _manager = _newManager;\n\n        emit ManagerTransferred(_previousManager, _newManager);\n        return true;\n    }\n\n    /* ============ Modifier Functions ============ */\n\n    /**\n     * @dev Throws if called by any account other than the manager.\n     */\n    modifier onlyManager() {\n        require(manager() == msg.sender, \"Manageable/caller-not-manager\");\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the manager or the owner.\n     */\n    modifier onlyManagerOrOwner() {\n        require(manager() == msg.sender || owner() == msg.sender, \"Manageable/caller-not-manager-or-owner\");\n        _;\n    }\n}\n"
    },
    "contracts/RNGChainlinkV2Interface.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\n\nimport \"./RNGInterface.sol\";\n\n/**\n * @title RNG Chainlink V2 Interface\n * @notice Provides an interface for requesting random numbers from Chainlink VRF V2.\n */\ninterface RNGChainlinkV2Interface is RNGInterface {\n  /**\n   * @notice Get Chainlink VRF keyHash associated with this contract.\n   * @return bytes32 Chainlink VRF keyHash\n   */\n  function getKeyHash() external view returns (bytes32);\n\n  /**\n   * @notice Get Chainlink VRF subscription id associated with this contract.\n   * @return uint64 Chainlink VRF subscription id\n   */\n  function getSubscriptionId() external view returns (uint64);\n\n  /**\n   * @notice Get Chainlink VRF coordinator contract address associated with this contract.\n   * @return address Chainlink VRF coordinator address\n   */\n  function getVrfCoordinator() external view returns (VRFCoordinatorV2Interface);\n\n  /**\n   * @notice Set Chainlink VRF keyHash.\n   * @dev This function is only callable by the owner.\n   * @param keyHash Chainlink VRF keyHash\n   */\n  function setKeyhash(bytes32 keyHash) external;\n\n  /**\n   * @notice Set Chainlink VRF subscription id associated with this contract.\n   * @dev This function is only callable by the owner.\n   * @param subscriptionId Chainlink VRF subscription id\n   */\n  function setSubscriptionId(uint64 subscriptionId) external;\n}\n"
    },
    "@pooltogether/owner-manager-contracts/contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.0;\n\n/**\n * @title Abstract ownable contract that can be inherited by other contracts\n * @notice Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner is the deployer of the contract.\n *\n * The owner account is set through a two steps process.\n *      1. The current `owner` calls {transferOwnership} to set a `pendingOwner`\n *      2. The `pendingOwner` calls {acceptOwnership} to accept the ownership transfer\n *\n * The manager account needs to be set using {setManager}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable {\n    address private _owner;\n    address private _pendingOwner;\n\n    /**\n     * @dev Emitted when `_pendingOwner` has been changed.\n     * @param pendingOwner new `_pendingOwner` address.\n     */\n    event OwnershipOffered(address indexed pendingOwner);\n\n    /**\n     * @dev Emitted when `_owner` has been changed.\n     * @param previousOwner previous `_owner` address.\n     * @param newOwner new `_owner` address.\n     */\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /* ============ Deploy ============ */\n\n    /**\n     * @notice Initializes the contract setting `_initialOwner` as the initial owner.\n     * @param _initialOwner Initial owner of the contract.\n     */\n    constructor(address _initialOwner) {\n        _setOwner(_initialOwner);\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * @notice Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @notice Gets current `_pendingOwner`.\n     * @return Current `_pendingOwner` address.\n     */\n    function pendingOwner() external view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @notice Renounce ownership of the contract.\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() external virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n    * @notice Allows current owner to set the `_pendingOwner` address.\n    * @param _newOwner Address to transfer ownership to.\n    */\n    function transferOwnership(address _newOwner) external onlyOwner {\n        require(_newOwner != address(0), \"Ownable/pendingOwner-not-zero-address\");\n\n        _pendingOwner = _newOwner;\n\n        emit OwnershipOffered(_newOwner);\n    }\n\n    /**\n    * @notice Allows the `_pendingOwner` address to finalize the transfer.\n    * @dev This function is only callable by the `_pendingOwner`.\n    */\n    function claimOwnership() external onlyPendingOwner {\n        _setOwner(_pendingOwner);\n        _pendingOwner = address(0);\n    }\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * @notice Internal function to set the `_owner` of the contract.\n     * @param _newOwner New `_owner` address.\n     */\n    function _setOwner(address _newOwner) private {\n        address _oldOwner = _owner;\n        _owner = _newOwner;\n        emit OwnershipTransferred(_oldOwner, _newOwner);\n    }\n\n    /* ============ Modifier Functions ============ */\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable/caller-not-owner\");\n        _;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the `pendingOwner`.\n    */\n    modifier onlyPendingOwner() {\n        require(msg.sender == _pendingOwner, \"Ownable/caller-not-pendingOwner\");\n        _;\n    }\n}\n"
    },
    "contracts/RNGInterface.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\n/**\n * @title Random Number Generator Interface\n * @notice Provides an interface for requesting random numbers from 3rd-party RNG services (Chainlink VRF, Starkware VDF, etc..)\n */\ninterface RNGInterface {\n  /**\n   * @notice Emitted when a new request for a random number has been submitted\n   * @param requestId The indexed ID of the request used to get the results of the RNG service\n   * @param sender The indexed address of the sender of the request\n   */\n  event RandomNumberRequested(uint32 indexed requestId, address indexed sender);\n\n  /**\n   * @notice Emitted when an existing request for a random number has been completed\n   * @param requestId The indexed ID of the request used to get the results of the RNG service\n   * @param randomNumber The random number produced by the 3rd-party service\n   */\n  event RandomNumberCompleted(uint32 indexed requestId, uint256 randomNumber);\n\n  /**\n   * @notice Gets the last request id used by the RNG service\n   * @return requestId The last request id used in the last request\n   */\n  function getLastRequestId() external view returns (uint32 requestId);\n\n  /**\n   * @notice Gets the Fee for making a Request against an RNG service\n   * @return feeToken The address of the token that is used to pay fees\n   * @return requestFee The fee required to be paid to make a request\n   */\n  function getRequestFee() external view returns (address feeToken, uint256 requestFee);\n\n  /**\n   * @notice Sends a request for a random number to the 3rd-party service\n   * @dev Some services will complete the request immediately, others may have a time-delay\n   * @dev Some services require payment in the form of a token, such as $LINK for Chainlink VRF\n   * @return requestId The ID of the request used to get the results of the RNG service\n   * @return lockBlock The block number at which the RNG service will start generating time-delayed randomness.\n   * The calling contract should \"lock\" all activity until the result is available via the `requestId`\n   */\n  function requestRandomNumber() external returns (uint32 requestId, uint32 lockBlock);\n\n  /**\n   * @notice Checks if the request for randomness from the 3rd-party service has completed\n   * @dev For time-delayed requests, this function is used to check/confirm completion\n   * @param requestId The ID of the request used to get the results of the RNG service\n   * @return isCompleted True if the request has completed and a random number is available, false otherwise\n   */\n  function isRequestComplete(uint32 requestId) external view returns (bool isCompleted);\n\n  /**\n   * @notice Gets the random number produced by the 3rd-party service\n   * @param requestId The ID of the request used to get the results of the RNG service\n   * @return randomNum The random number\n   */\n  function randomNumber(uint32 requestId) external returns (uint256 randomNum);\n}\n"
    },
    "contracts/test/RNGChainlinkV2Harness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../RNGChainlinkV2.sol\";\n\ncontract RNGChainlinkV2Harness is RNGChainlinkV2 {\n  constructor(\n    address _owner,\n    VRFCoordinatorV2Interface _vrfCoordinator,\n    uint64 _subscriptionId,\n    bytes32 _keyHash\n  )\n    RNGChainlinkV2(\n      _owner,\n      _vrfCoordinator,\n      _subscriptionId,\n      _keyHash\n    )\n  {}\n\n  function subscribe() external {\n    address[] memory consumers = new address[](1);\n    consumers[0] = address(this);\n    subscriptionId = vrfCoordinator.createSubscription();\n    vrfCoordinator.addConsumer(subscriptionId, consumers[0]);\n  }\n\n  function setRequestCounter(uint32 _requestCounter) external {\n    requestCounter = _requestCounter;\n  }\n\n  function rawFulfillRandomWordsStub(uint256 requestId, uint256[] memory randomWords) external {\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "contracts/test/RNGServiceStub.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../RNGInterface.sol\";\n\ncontract RNGServiceStub is RNGInterface {\n  uint256 internal random;\n  address internal feeToken;\n  uint256 internal requestFee;\n\n  function getLastRequestId() external pure override returns (uint32 requestId) {\n    return 1;\n  }\n\n  function setRequestFee(address _feeToken, uint256 _requestFee) external {\n    feeToken = _feeToken;\n    requestFee = _requestFee;\n  }\n\n  /// @return _feeToken\n  /// @return _requestFee\n  function getRequestFee() external view override returns (address _feeToken, uint256 _requestFee) {\n    return (feeToken, requestFee);\n  }\n\n  function setRandomNumber(uint256 _random) external {\n    random = _random;\n  }\n\n  function requestRandomNumber() external pure override returns (uint32, uint32) {\n    return (1, 1);\n  }\n\n  function isRequestComplete(uint32) external pure override returns (bool) {\n    return true;\n  }\n\n  function randomNumber(uint32) external view override returns (uint256) {\n    return random;\n  }\n}\n"
    },
    "contracts/RNGChainlink.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\";\n\nimport \"./RNGInterface.sol\";\n\ncontract RNGChainlink is RNGInterface, VRFConsumerBase, Ownable {\n  event KeyHashSet(bytes32 keyHash);\n  event FeeSet(uint256 fee);\n  event VrfCoordinatorSet(address indexed vrfCoordinator);\n  event VRFRequested(uint256 indexed requestId, bytes32 indexed chainlinkRequestId);\n\n  /// @dev The keyhash used by the Chainlink VRF\n  bytes32 public keyHash;\n\n  /// @dev The request fee of the Chainlink VRF\n  uint256 public fee;\n\n  /// @dev A counter for the number of requests made used for request ids\n  uint32 public requestCount;\n\n  /// @dev A list of random numbers from past requests mapped by request id\n  mapping(uint32 => uint256) internal randomNumbers;\n\n  /// @dev A list of blocks to be locked at based on past requests mapped by request id\n  mapping(uint32 => uint32) internal requestLockBlock;\n\n  /// @dev A mapping from Chainlink request ids to internal request ids\n  mapping(bytes32 => uint32) internal chainlinkRequestIds;\n\n  /// @dev Public constructor\n  constructor(address _vrfCoordinator, address _link) VRFConsumerBase(_vrfCoordinator, _link) {\n    emit VrfCoordinatorSet(_vrfCoordinator);\n  }\n\n  function getLink() external view returns (address) {\n    return address(LINK);\n  }\n\n  /// @notice Allows governance to set the VRF keyhash\n  /// @param _keyhash The keyhash to be used by the VRF\n  function setKeyhash(bytes32 _keyhash) external onlyOwner {\n    keyHash = _keyhash;\n\n    emit KeyHashSet(keyHash);\n  }\n\n  /// @notice Allows governance to set the fee per request required by the VRF\n  /// @param _fee The fee to be charged for a request\n  function setFee(uint256 _fee) external onlyOwner {\n    fee = _fee;\n\n    emit FeeSet(fee);\n  }\n\n  /// @notice Gets the last request id used by the RNG service\n  /// @return requestId The last request id used in the last request\n  function getLastRequestId() external view override returns (uint32 requestId) {\n    return requestCount;\n  }\n\n  /// @notice Gets the Fee for making a Request against an RNG service\n  /// @return feeToken The address of the token that is used to pay fees\n  /// @return requestFee The fee required to be paid to make a request\n  function getRequestFee() external view override returns (address feeToken, uint256 requestFee) {\n    return (address(LINK), fee);\n  }\n\n  /// @notice Sends a request for a random number to the 3rd-party service\n  /// @dev Some services will complete the request immediately, others may have a time-delay\n  /// @dev Some services require payment in the form of a token, such as $LINK for Chainlink VRF\n  /// @return requestId The ID of the request used to get the results of the RNG service\n  /// @return lockBlock The block number at which the RNG service will start generating time-delayed randomness.  The calling contract\n  /// should \"lock\" all activity until the result is available via the `requestId`\n  function requestRandomNumber() external override returns (uint32 requestId, uint32 lockBlock) {\n    lockBlock = uint32(block.number);\n\n    // collect fee for payment\n    require(LINK.transferFrom(msg.sender, address(this), fee), \"RNGChainlink/fee-transfer-failed\");\n\n    // send request (costs fee)\n    requestId = _requestRandomness();\n\n    requestLockBlock[requestId] = lockBlock;\n\n    emit RandomNumberRequested(requestId, msg.sender);\n  }\n\n  /// @notice Checks if the request for randomness from the 3rd-party service has completed\n  /// @dev For time-delayed requests, this function is used to check/confirm completion\n  /// @param requestId The ID of the request used to get the results of the RNG service\n  /// @return isCompleted True if the request has completed and a random number is available, false otherwise\n  function isRequestComplete(uint32 requestId) external view override returns (bool isCompleted) {\n    return randomNumbers[requestId] != 0;\n  }\n\n  /// @notice Gets the random number produced by the 3rd-party service\n  /// @param requestId The ID of the request used to get the results of the RNG service\n  /// @return randomNum The random number\n  function randomNumber(uint32 requestId) external view override returns (uint256 randomNum) {\n    return randomNumbers[requestId];\n  }\n\n  /// @dev Requests a new random number from the Chainlink VRF\n  /// @dev The result of the request is returned in the function `fulfillRandomness`\n  function _requestRandomness() internal returns (uint32 requestId) {\n    // Get next request ID\n    requestId = _getNextRequestId();\n\n    // Complete request\n    bytes32 vrfRequestId = requestRandomness(keyHash, fee);\n    chainlinkRequestIds[vrfRequestId] = requestId;\n\n    emit VRFRequested(requestId, vrfRequestId);\n  }\n\n  /// @notice Callback function used by VRF Coordinator\n  /// @dev The VRF Coordinator will only send this function verified responses.\n  /// @dev The VRF Coordinator will not pass randomness that could not be verified.\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\n    uint32 internalRequestId = chainlinkRequestIds[requestId];\n\n    // Store random value\n    randomNumbers[internalRequestId] = randomness;\n\n    emit RandomNumberCompleted(internalRequestId, randomness);\n  }\n\n  /// @dev Gets the next consecutive request ID to be used\n  /// @return requestId The ID to be used for the next request\n  function _getNextRequestId() internal returns (uint32 requestId) {\n    requestCount++;\n    requestId = requestCount;\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash] + 1;\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface internal immutable LINK;\n  address private immutable vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\n    private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(address _vrfCoordinator, address _link) {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VRFRequestIDBase {\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  ) internal pure returns (uint256) {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}\n"
    },
    "contracts/test/RNGChainlinkHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../RNGChainlink.sol\";\n\ncontract RNGChainlinkHarness is RNGChainlink {\n  constructor(address _vrfCoordinator, address _link) RNGChainlink(_vrfCoordinator, _link) {}\n\n  function setRequestCount(uint32 _requestCount) external {\n    requestCount = _requestCount;\n  }\n\n  function setRandomNumber(uint32 requestId, uint256 rand) external {\n    randomNumbers[requestId] = rand;\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/test/ERC20Mintable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20Mintable is ERC20 {\n  constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\n\n  function mint(address to, uint256 amount) external {\n    _mint(to, amount);\n  }\n}\n"
    },
    "contracts/RNGBlockhash.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./RNGInterface.sol\";\n\ncontract RNGBlockhash is RNGInterface, Ownable {\n  /// @dev A counter for the number of requests made used for request ids\n  uint32 internal requestCount;\n\n  /// @dev A list of random numbers from past requests mapped by request id\n  mapping(uint32 => uint256) internal randomNumbers;\n\n  /// @dev A list of blocks to be locked at based on past requests mapped by request id\n  mapping(uint32 => uint32) internal requestLockBlock;\n\n  /// @notice Gets the last request id used by the RNG service\n  /// @return requestId The last request id used in the last request\n  function getLastRequestId() external view override returns (uint32 requestId) {\n    return requestCount;\n  }\n\n  /// @notice Gets the Fee for making a Request against an RNG service\n  /// @return feeToken The address of the token that is used to pay fees\n  /// @return requestFee The fee required to be paid to make a request\n  function getRequestFee() external pure override returns (address feeToken, uint256 requestFee) {\n    return (address(0), 0);\n  }\n\n  /// @notice Sends a request for a random number to the 3rd-party service\n  /// @dev Some services will complete the request immediately, others may have a time-delay\n  /// @dev Some services require payment in the form of a token, such as $LINK for Chainlink VRF\n  /// @return requestId The ID of the request used to get the results of the RNG service\n  /// @return lockBlock The block number at which the RNG service will start generating time-delayed randomness.  The calling contract\n  /// should \"lock\" all activity until the result is available via the `requestId`\n  function requestRandomNumber()\n    external\n    virtual\n    override\n    returns (uint32 requestId, uint32 lockBlock)\n  {\n    requestId = _getNextRequestId();\n    lockBlock = uint32(block.number);\n\n    requestLockBlock[requestId] = lockBlock;\n\n    emit RandomNumberRequested(requestId, msg.sender);\n  }\n\n  /// @notice Checks if the request for randomness from the 3rd-party service has completed\n  /// @dev For time-delayed requests, this function is used to check/confirm completion\n  /// @param requestId The ID of the request used to get the results of the RNG service\n  /// @return isCompleted True if the request has completed and a random number is available, false otherwise\n  function isRequestComplete(uint32 requestId)\n    external\n    view\n    virtual\n    override\n    returns (bool isCompleted)\n  {\n    return _isRequestComplete(requestId);\n  }\n\n  /// @notice Gets the random number produced by the 3rd-party service\n  /// @param requestId The ID of the request used to get the results of the RNG service\n  /// @return randomNum The random number\n  function randomNumber(uint32 requestId) external virtual override returns (uint256 randomNum) {\n    require(_isRequestComplete(requestId), \"RNGBlockhash/request-incomplete\");\n\n    if (randomNumbers[requestId] == 0) {\n      _storeResult(requestId, _getSeed());\n    }\n\n    return randomNumbers[requestId];\n  }\n\n  /// @dev Checks if the request for randomness from the 3rd-party service has completed\n  /// @param requestId The ID of the request used to get the results of the RNG service\n  /// @return True if the request has completed and a random number is available, false otherwise\n  function _isRequestComplete(uint32 requestId) internal view returns (bool) {\n    return block.number > (requestLockBlock[requestId] + 1);\n  }\n\n  /// @dev Gets the next consecutive request ID to be used\n  /// @return requestId The ID to be used for the next request\n  function _getNextRequestId() internal returns (uint32 requestId) {\n    requestCount++;\n    requestId = requestCount;\n  }\n\n  /// @dev Gets a seed for a random number from the latest available blockhash\n  /// @return seed The seed to be used for generating a random number\n  function _getSeed() internal view virtual returns (uint256 seed) {\n    return uint256(blockhash(block.number - 1));\n  }\n\n  /// @dev Stores the latest random number by request ID and logs the event\n  /// @param requestId The ID of the request to store the random number\n  /// @param result The random number for the request ID\n  function _storeResult(uint32 requestId, uint256 result) internal {\n    // Store random value\n    randomNumbers[requestId] = result;\n\n    emit RandomNumberCompleted(requestId, result);\n  }\n}\n"
    },
    "contracts/test/RNGBlockhashHarness.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.6;\n\nimport \"../RNGBlockhash.sol\";\n\ncontract RNGBlockhashHarness is RNGBlockhash {\n  uint256 internal _seed;\n\n  function setRequestCount(uint32 _requestCount) external {\n    requestCount = _requestCount;\n  }\n\n  function setRandomNumber(uint32 requestId, uint256 rand) external {\n    randomNumbers[requestId] = rand;\n  }\n\n  function setSeed(uint256 seed) external {\n    _seed = seed;\n  }\n\n  function _getSeed() internal view override returns (uint256 seed) {\n    return _seed;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "evmVersion": "berlin",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}